package com.example.coderqiang.xmatch_android.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.coderqiang.xmatch_android.model.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, Long.class, "userId", true, "_id");
        public final static Property StuNo = new Property(1, String.class, "stuNo", false, "STU_NO");
        public final static Property Passwd = new Property(2, String.class, "passwd", false, "PASSWD");
        public final static Property Username = new Property(3, String.class, "username", false, "USERNAME");
        public final static Property Sex = new Property(4, int.class, "sex", false, "SEX");
        public final static Property College = new Property(5, String.class, "college", false, "COLLEGE");
        public final static Property BindPhone = new Property(6, int.class, "bindPhone", false, "BIND_PHONE");
        public final static Property PhoneNum = new Property(7, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property Email = new Property(8, String.class, "email", false, "EMAIL");
        public final static Property IsLogin = new Property(9, boolean.class, "isLogin", false, "IS_LOGIN");
        public final static Property AvatorUrl = new Property(10, String.class, "avatorUrl", false, "AVATOR_URL");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: userId
                "\"STU_NO\" TEXT," + // 1: stuNo
                "\"PASSWD\" TEXT," + // 2: passwd
                "\"USERNAME\" TEXT," + // 3: username
                "\"SEX\" INTEGER NOT NULL ," + // 4: sex
                "\"COLLEGE\" TEXT," + // 5: college
                "\"BIND_PHONE\" INTEGER NOT NULL ," + // 6: bindPhone
                "\"PHONE_NUM\" TEXT," + // 7: phoneNum
                "\"EMAIL\" TEXT," + // 8: email
                "\"IS_LOGIN\" INTEGER NOT NULL ," + // 9: isLogin
                "\"AVATOR_URL\" TEXT);"); // 10: avatorUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String stuNo = entity.getStuNo();
        if (stuNo != null) {
            stmt.bindString(2, stuNo);
        }
 
        String passwd = entity.getPasswd();
        if (passwd != null) {
            stmt.bindString(3, passwd);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
        stmt.bindLong(5, entity.getSex());
 
        String college = entity.getCollege();
        if (college != null) {
            stmt.bindString(6, college);
        }
        stmt.bindLong(7, entity.getBindPhone());
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(8, phoneNum);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
        stmt.bindLong(10, entity.getIsLogin() ? 1L: 0L);
 
        String avatorUrl = entity.getAvatorUrl();
        if (avatorUrl != null) {
            stmt.bindString(11, avatorUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(1, userId);
        }
 
        String stuNo = entity.getStuNo();
        if (stuNo != null) {
            stmt.bindString(2, stuNo);
        }
 
        String passwd = entity.getPasswd();
        if (passwd != null) {
            stmt.bindString(3, passwd);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(4, username);
        }
        stmt.bindLong(5, entity.getSex());
 
        String college = entity.getCollege();
        if (college != null) {
            stmt.bindString(6, college);
        }
        stmt.bindLong(7, entity.getBindPhone());
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(8, phoneNum);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(9, email);
        }
        stmt.bindLong(10, entity.getIsLogin() ? 1L: 0L);
 
        String avatorUrl = entity.getAvatorUrl();
        if (avatorUrl != null) {
            stmt.bindString(11, avatorUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // stuNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // passwd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // username
            cursor.getInt(offset + 4), // sex
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // college
            cursor.getInt(offset + 6), // bindPhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phoneNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // email
            cursor.getShort(offset + 9) != 0, // isLogin
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // avatorUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStuNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPasswd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsername(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSex(cursor.getInt(offset + 4));
        entity.setCollege(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBindPhone(cursor.getInt(offset + 6));
        entity.setPhoneNum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEmail(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsLogin(cursor.getShort(offset + 9) != 0);
        entity.setAvatorUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setUserId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
